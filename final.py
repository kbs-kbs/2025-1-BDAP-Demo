# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k_1WzPRS1dnr2dhonlQHsjuKee61bMrN
"""

import streamlit as st
import pandas as pd
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
import matplotlib.pyplot as plt
import seaborn as sns
import os
import plotly.express as px

# --- 페이지 설정 ---
st.set_page_config(page_title="서울 따릉이 분석 대시보드", layout="wide")
plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False

# --- 탭 구성 ---
tab1, tab2, tab3 = st.tabs([
    "📍 따릉이 대여소 지도",
    "🛠 고장 분석",
    "🚴 자전거 렌탈수 & 기상 상관관계"
])

# ================================
# TAB 1: 따릉이 대여소 지도
# ================================
with tab1:
    st.title("📍 서울 따릉이 대여소 지도")

    try:
        df_map = pd.read_csv('merged_bike_data.csv')
    except FileNotFoundError:
        st.error("Error: '병합된_따릉이_데이터.csv' 파일을 찾을 수 없습니다.")
        st.stop()

    # 데이터 전처리
    df_map['대여건수'] = df_map['대여건수'].fillna(0).astype(int)
    df_map['반납건수'] = df_map['반납건수'].fillna(0).astype(int)
    df_map['총이용건수'] = df_map['총이용건수'].fillna(0).astype(int)
    df_map['주소2'] = df_map['주소2'].fillna('')
    df_map['위도'] = pd.to_numeric(df_map['위도'], errors='coerce')
    df_map['경도'] = pd.to_numeric(df_map['경도'], errors='coerce')
    df_map.dropna(subset=['위도', '경도'], inplace=True)

    # 검색창 (key 지정) + session_state 연동
    search_id = st.text_input("대여소 ID로 검색하기", key="search_id")
    current_search_id = st.session_state.get("search_id", "")

    # 상위/하위 3개 추출
    df_sorted = df_map.sort_values(by='총이용건수', ascending=False)
    top3 = df_sorted.head(3)
    bottom3 = df_sorted.tail(3)

    # 지도 중심 위치 결정
    if current_search_id and current_search_id in df_map['대여소_ID'].astype(str).values:
        searched_row = df_map[df_map['대여소_ID'].astype(str) == current_search_id].iloc[0]
        map_center = [searched_row['위도'], searched_row['경도']]
        zoom_level = 16
    else:
        map_center = [37.5665, 126.9780]
        zoom_level = 11

    m = folium.Map(location=map_center, zoom_start=zoom_level)
    marker_cluster = MarkerCluster().add_to(m)

    for idx, row in df_map.iterrows():
        full_address = f"{row['주소1']} {row['주소2']}".strip()
        is_top = row['대여소_ID'] in top3['대여소_ID'].values
        is_bottom = row['대여소_ID'] in bottom3['대여소_ID'].values

        base_popup = f"""
        <b>대여소 ID:</b> {row['대여소_ID']}<br>
        <b>주소:</b> {full_address}<br>
        <b>총 이용 건수:</b> {row['총이용건수']:,} 건<br>
        <b>대여 건수:</b> {row['대여건수']:,} 건<br>
        <b>반납 건수:</b> {row['반납건수']:,} 건
        """

        if is_top:
            rank = top3[top3['대여소_ID'] == row['대여소_ID']].index[0] + 1
            popup_html = f"<b>🏆 총 이용률 {rank}위!</b><br>" + base_popup
            tooltip_text = f"🏆 {rank}위 | {row['대여소_ID']}"
            color = 'blue'
            radius = 12
        elif is_bottom:
            popup_html = base_popup + "<br><b>⚠ 통폐합 검토 필요</b>"
            tooltip_text = f"⚠ {row['대여소_ID']} (이용 적음)"
            color = 'gray'
            radius = 8
        else:
            total_uses = row['총이용건수']
            if total_uses > 100000:
                color = 'red'
            elif total_uses > 50000:
                color = 'orange'
            else:
                color = 'green'
            popup_html = base_popup
            tooltip_text = f"{row['대여소_ID']} (총 이용: {total_uses:,}건)"
            radius = max(5, total_uses / 5000)

        # 검색한 대여소면 크게 표시 + 보라색
        if current_search_id and str(row['대여소_ID']) == current_search_id:
            radius = max(radius, 20)
            color = 'purple'
            tooltip_text = f"🔎 검색된 대여소: {current_search_id}"

        folium.CircleMarker(
            location=[row['위도'], row['경도']],
            radius=radius,
            color=color,
            fill=True,
            fill_color=color,
            fill_opacity=0.7,
            popup=folium.Popup(popup_html, max_width=300),
            tooltip=tooltip_text
        ).add_to(marker_cluster)

    st_folium(m, width=1200, height=700)

    st.markdown("""
    **마커 색상 기준**
    - 🔵 파랑: 이용률 TOP 3
    - ⚪ 회색: 이용률 BOTTOM 3 (통폐합 검토)
    - 🔴 빨강: 100,000건 이상
    - 🟠 주황: 50,000건 이상
    - 🟢 녹색: 50,000건 미만
    - 🟣 보라: 검색한 대여소

    마커 크기는 총 이용건수에 비례하며, 검색한 대여소는 크게 표시됩니다.

  
    #### 🔺 총 이용건수 **상위 3개 대여소**
    1위: **ST-2031**(마곡나루역(9호선))
    2위: **ST-99**(뚝섬유원지역 1번출구 앞) 
    3위: **ST-1718**(마곡나루역(공항철도) 5번출구 뒤편)

    #### 🔻 총 이용건수 **하위 3개 대여소**
    1위: **ST-1750**(서울특별시 강서구 개화동로8길 17)  
    2위: **ST-1748**(서울특별시 영등포구 여의도동 85-3)
    3위: **ST-2145**(서울특별시 구로구 천왕동 14-38)
    
    ### 분석 목적
    - 대여-반납 차이가 큰 대여소를 파악해 자전거 부족 및 과잉 문제를 식별하고 재배치 효율성을 높입니다.
   
    ### 예상 결론
    - 이용률 저조한 대여소는 단계적 통폐합 또는 인근 인기 대여소 주변으로 이전하여 운영비용 절감 및 자원 효율을 극대화합니다.
    
    """)
    
    
# ================================
# TAB 2: 고장 분석
# ================================
with tab2:
    st.title("🛠 서울 따릉이 고장 분석")

    @st.cache_data
    def load_fault_data():
        path = './data_processed/df_analysis_final_with_readable_dates.parquet'
        if not os.path.exists(path):
            st.error(f"데이터 파일이 없습니다: {path}")
            return None
        try:
            df_fault = pd.read_parquet(path)
            if 'fault_datetime' in df_fault.columns:
                df_fault['fault_datetime'] = pd.to_datetime(df_fault['fault_datetime'], errors='coerce')
            return df_fault
        except Exception as e:
            st.error(f"데이터 로드 오류: {e}")
            return None

    df = load_fault_data()
    if df is None or df.empty:
        st.warning("고장 데이터가 없습니다.")
        st.stop()

    st.sidebar.header("🧰 필터")
    fault_types = sorted(df['fault_type'].dropna().unique())
    selected_types = st.sidebar.multiselect("고장 유형 선택", fault_types, default=fault_types[:5])

    filtered_df = df[df['fault_type'].isin(selected_types)]

    if 'fault_datetime' in filtered_df.columns and not filtered_df['fault_datetime'].dropna().empty:
        min_date = filtered_df['fault_datetime'].min().date()
        max_date = filtered_df['fault_datetime'].max().date()
        selected_range = st.sidebar.date_input("고장 발생 기간", (min_date, max_date), min_value=min_date, max_value=max_date)
        if len(selected_range) == 2:
            start, end = selected_range
            filtered_df = filtered_df[(filtered_df['fault_datetime'] >= pd.Timestamp(start)) & (filtered_df['fault_datetime'] <= pd.Timestamp(end))]

    st.subheader("🎯 고장 유형별 발생 빈도")
    if not filtered_df.empty:
        fault_counts = filtered_df['fault_type'].value_counts().sort_values(ascending=False)
        fig1, ax1 = plt.subplots(figsize=(10, 5))
        sns.barplot(x=fault_counts.index, y=fault_counts.values, ax=ax1, palette="Set2")
        ax1.set_ylabel("발생 건수")
        ax1.set_xlabel("고장 유형")
        ax1.set_title("고장 유형별 발생 빈도")
        plt.xticks(rotation=45)
        st.pyplot(fig1)
        st.dataframe(fault_counts.rename("발생 건수").reset_index().rename(columns={"index": "고장 유형"}))

    st.subheader("📊 고장 시 누적 사용량 (km) 분석")
    if 'cumulative_km_at_fault' in filtered_df.columns:
        fig2, ax2 = plt.subplots(figsize=(10, 5))
        sns.boxplot(data=filtered_df, x="fault_type", y="cumulative_km_at_fault", palette="Set3")
        ax2.set_xlabel("고장 유형")
        ax2.set_ylabel("고장 시 누적 주행 거리 (km)")
        ax2.set_title("고장 시 누적 주행 거리 분포")
        plt.xticks(rotation=45)
        st.pyplot(fig2)

        stats = filtered_df.groupby("fault_type")["cumulative_km_at_fault"].describe()[["count", "mean", "std", "min", "25%", "50%", "75%", "max"]]
        stats = stats.loc[selected_types]
        st.dataframe(stats.style.format(precision=2))
        
# ================================
# TAB 3: 자전거 렌탈수 & 기상 상관관계
# ================================
with tab3:
    st.title('🚴 서울 자전거 렌탈수와 기상데이터 상관관계 분석')

    # 개별 파일에서 데이터 불러오기
    try:
        bike_df = pd.read_csv('seoul_bike_rentals_2024.csv')
        weather_df = pd.read_csv('2024_weather.csv')
    except FileNotFoundError as e:
        st.error(f"데이터 파일을 찾을 수 없습니다: {e}")
        st.stop()

    # 날짜 처리
    bike_df['date'] = pd.to_datetime(bike_df['date'])
    weather_df['일시'] = pd.to_datetime(weather_df['일시'])

    # '일시' 포함해서 필요한 열 선택
    weather_selected = weather_df.loc[:, ['일시'] + list(weather_df.columns[3:10])]

    # 병합
    merged = pd.merge(bike_df, weather_selected, left_on='date', right_on='일시', how='left')
    merged.drop(columns=['일시'], inplace=True)

    # 월과 계절 정보 추가
    merged['month'] = merged['date'].dt.month

    def get_season(month):
        if month in [3, 4, 5]:
            return '봄'
        elif month in [6, 7, 8]:
            return '여름'
        elif month in [9, 10, 11]:
            return '가을'
        elif month in [12, 1, 2]:
            return '겨울'
        
    def get_months(season):
        if season == '봄':
            return [3, 4, 5]
        elif season == '여름':
            return [6, 7, 8]
        elif season == '가을':
            return [9, 10, 11]
        elif season == '겨울':
            return [12, 1, 2]

    merged['season'] = merged['month'].apply(get_season)

    # 월별 렌탈수 합계와 평균 기온 계산
    monthly_rent = merged.groupby('month')['rent_count'].sum()
    monthly_temp = merged.groupby('month')['평균기온(℃)'].mean()

    # 월 번호 -> 한글 월 이름 매핑
    month_names = {1:'1월', 2:'2월', 3:'3월', 4:'4월', 5:'5월', 6:'6월',
                   7:'7월', 8:'8월', 9:'9월', 10:'10월', 11:'11월', 12:'12월'}

    # 월별 데이터 프레임 생성
    monthly_df = pd.DataFrame({
        '월': [month_names[m] for m in monthly_rent.index],
        '렌탈수 합계': monthly_rent.values,
        '평균기온': monthly_temp.values
    })

    # 1년 중 최대, 최소 렌탈수 월 찾기
    max_rent = monthly_df.loc[monthly_df['렌탈수 합계'].idxmax()]
    min_rent = monthly_df.loc[monthly_df['렌탈수 합계'].idxmin()]

    # Plotly 막대그래프 그리기
    fig = px.bar(monthly_df, x='월', y='렌탈수 합계',
                 labels={'렌탈수 합계':'월별 렌탈수 합계', '월':'월'},
                 title='월별 자전거 렌탈수와 평균기온',
                 hover_data={'평균기온': True, '렌탈수 합계': True},
                 text='렌탈수 합계')

    fig.update_traces(
        hovertemplate=
        '<b>%{x}</b><br>'+
        '총 렌탈 수: %{y}<br>'+
        '평균 기온: %{customdata[0]:.1f}℃<br>'+
        '<extra></extra>',
        customdata=monthly_df[['평균기온']].values
    )
    fig.update_layout(yaxis=dict(title='렌탈수 합계'), xaxis=dict(title='월'))

    st.plotly_chart(fig, use_container_width=True)
    # 최대/최소 월 출력
    st.markdown(f"**1년 중 가장 렌탈 수가 많은 달: {max_rent['월']} ({max_rent['렌탈수 합계']:,}건)**")
    st.markdown(f"**1년 중 가장 렌탈 수가 적은 달: {min_rent['월']} ({min_rent['렌탈수 합계']:,}건)**")

    # 간단 해석
    st.markdown("""
    **해석:**  
    - 봄과 가을에 렌탈 수가 상승하는 경향이 뚜렷합니다.  
    - 겨울(12,1,2월)은 렌탈 수가 현저히 감소하며, 평균 기온도 낮습니다.  
    - 무더운 여름(6~8월)은 기온 영향과 강수량에 따라 변동이 있습니다.
    """)

    st.markdown("## 계절별 날씨와 렌탈 수의 상관관계")

    seasons = ['봄', '여름', '가을', '겨울']

    for season in seasons:
        season_df = merged[merged['season'] == season]
        st.subheader(f"{season}({[month + '월' for month in get_months(season)]}) 상관관계 분석")
        if season_df.empty:
            st.warning(f"{season} 데이터가 존재하지 않습니다.")
        else:
            numeric_cols = season_df.select_dtypes(include='number').columns.tolist()
            corr = season_df[numeric_cols].corr()
            # 'month' 컬럼이 있을 때만 drop
            if 'month' in corr.columns:
                rent_corr = corr.loc[['rent_count']].drop(['month'], axis=1)
            else:
                rent_corr = corr.loc[['rent_count']]
            plt.rcParams['font.family'] = 'Malgun Gothic'
            plt.rcParams['axes.unicode_minus'] = False
            plt.figure(figsize=(10, 1))
            sns.heatmap(rent_corr, annot=True, cmap='coolwarm', linewidths=0.5)
            st.pyplot(plt)
            plt.close()

    # 해석 요약
        st.subheader('📌 분석 요약')
        if season == '겨울':
            st.markdown("- **기온이 낮고, 강수량이 많을수록 자전거 렌탈 수가 줄어드는 경향**이 있습니다.")
        elif season == '여름':
            st.markdown("- **무더위와 비의 영향으로 렌탈 수가 감소**할 수 있습니다.")
        elif season == '봄':
            st.markdown("- **날씨가 좋아 자전거 렌탈 수가 급증**하는 경향이 있습니다.")
        elif season == '가을':
            st.markdown("- **쾌적한 기후로 렌탈 수가 안정적으로 높은 편**입니다.")
            
            # 예) 인기 + 비효율 대여소 운영 분석 탭 내 상단에 안내 텍스트 추가

    st.markdown("""
    ### 분석 목적
    - 기상 상황에 따른 이용량 변화를 분석해 날씨 기반 수요 예측 및 재배치 전략을 마련합니다.

    ### 예상 결론
    - 날씨 기반 수요 예측 및 자전거 재배치 전략 수립에 활용 이런식의 분석 목적과 분석 예상
    """)


